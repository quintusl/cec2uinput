name: Create Release and Publish Assets

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0, v1.2.3, etc.

jobs:
  create_gh_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create releases and upload assets
    outputs:
      pkg_name: ${{ steps.get_version.outputs.pkg_name }}
      version: ${{ steps.get_version.outputs.version }}
      tag_name: ${{ github.ref_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        # Example: v1.0.0 -> 1.0.0
        run: |
          export PKG_NAME=$(grep -A 10 '\[package\]' Cargo.toml | grep '^name *=' | sed 's/name *= *"\(.*\)"/\1/')
          echo "pkg_name=${PKG_NAME}" >> $GITHUB_OUTPUT
          echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release_step
        env:
          PKG_NAME: ${{ steps.get_version.outputs.pkg_name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          gh release create ${{ github.ref_name }} \
            --title "  Release ${{ github.ref_name }}" \
            --notes "  Automated release for ${{ env.PKG_NAME }} version ${{ env.VERSION }}." \
            --draft=false \
            --prerelease=false


  build_and_upload_source_archive:
    name: Build and Upload Source Archive
    runs-on: ubuntu-latest
    needs:
      - create_gh_release
    permissions:
      contents: write # Required to upload assets (read permission is implicit for checkout)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required by git archive to correctly use the tag

      - name: Create source archive
        id: create_source_archive
        env:
          PKG_NAME: ${{ needs.create_gh_release.outputs.pkg_name }}
          VERSION: ${{ needs.create_gh_release.outputs.version }}
          TAG_NAME: ${{ needs.create_gh_release.outputs.tag_name }}
        run: |
          ARCHIVE_NAME="${{ env.PKG_NAME }}-${VERSION}.tar.gz"
          # Create archive from the tagged commit, ensuring it extracts to a versioned directory
          git archive --format=tar.gz --prefix="${{ env.PKG_NAME }}-${VERSION}/" -o "${ARCHIVE_NAME}" "${TAG_NAME}"
          echo "archive_path=${PWD}/${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
          echo "Created archive: ${ARCHIVE_NAME}"
          if [ -z "${PWD}/${ARCHIVE_NAME}" ]; then
            echo "::error::Archive path is empty. Check if the archive was created successfully."
            exit 1
          fi
          ls -lh "${ARCHIVE_NAME}"
          exit 0

      - name: Upload source archive to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARCHIVE_PATH: ${{ steps.create_source_archive.outputs.archive_path }}
        run: |
          gh release upload ${{ needs.create_gh_release.outputs.tag_name }} "${{ env.ARCHIVE_PATH }}"

  build_debian_packages:
    name: Build Debian Package (${{ matrix.host_arch }})
    runs-on: ubuntu-latest
    needs:
      - create_gh_release
    permissions:
      contents: write # Required to upload assets (read permission is implicit for checkout)
    strategy:
      fail-fast: false # Allow other matrix jobs to continue if one fails
      matrix:
        include:
          - host_arch: amd64
          - host_arch: arm64
          - host_arch: armhf

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create_gh_release.outputs.tag_name }}

      - name: Build Debian package
        uses: jtdor/build-deb-action@v1
        env:
          DEB_BUILD_OPTIONS: noautodbgsym
        with:
          host-arch: ${{ matrix.host_arch }}
          buildpackage-opts: --build=binary --no-sign
          before-build-hook: |
            source /etc/os-release
            echo "Setting up APT multi-arch sources for $ID $VERSION_CODENAME"
            cat /etc/apt/sources.list.d/ubuntu.sources \
            | sed -e 's/Types: deb/Types: deb\nArchitectures: amd64/g' \
            | sudo tee /etc/apt/sources.list.d/ubuntu.sources
            cat <<EOF | sudo tee /etc/apt/sources.list.d/ubuntu-ports.sources
            Types: deb
            URIs: http://ports.ubuntu.com/ubuntu-ports/
            Suites: $VERSION_CODENAME $VERSION_CODENAME-updates $VERSION_CODENAME-backports
            Components: main restricted universe multiverse
            Architectures: armhf arm64
            Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg

            Types: deb
            URIs: http://security.ports.ubuntu.com/ubuntu-ports/
            Suites: $VERSION_CODENAME-security
            Components: main restricted universe multiverse
            Architectures: armhf arm64
            Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg

            EOF
            apt-get update -qq
            apt-get install -y --no-install-recommends curl sudo debhelper-compat rustup pkg-config systemd-libs libstdc++-13-dev libcec-dev libudev-dev
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source ~/.cargo/env
            rustup -q default stable
            rustup -q update
            case "${{ matrix.host_arch }}" in
              "amd64")
                rustup target add x86_64-unknown-linux-gnu
                ;;
              "arm64")
                install -y --no-install-recommends \
                  debhelper-compat rustup pkg-config  gcc-aarch64-linux-gnu libc6-dev-arm64-cross \
                  libstdc++-13-dev-arm64-cross libcec-dev:arm64 libudev-dev:arm64
                rustup target add aarch64-unknown-linux-gnu
                ;;
              "armhf")
                apt install -y --no-install-recommends \
                  debhelper-compat rustup pkg-config gcc-arm-linux-gnueabihf libc6-dev-armhf-cross \
                  libstdc++-13-dev-armhf-cross libcec-dev:armhf libudev-dev:armhf
                rustup target add armv7-unknown-linux-gnueabihf
                ;;
            esac

      - name: Upload Debian package to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.create_gh_release.outputs.tag_name }}
        run: |
          # Find the built .deb package
          DEB_FILE=$(find debian/artifacts/ -name "*.deb" -type f | head -1)
          if [ -z "$DEB_FILE" ]; then
            echo "::error::No .deb file found in debian/artifacts/"
            ls -la debian/artifacts/ || echo "debian/artifacts/ directory not found"
            exit 1
          fi
          echo "Found Debian package: $DEB_FILE"
          gh release upload "$TAG_NAME" "$DEB_FILE"

  aur_publish:
    name: "Publish Arch Linux source package to AUR"
    permissions:
      contents: read
    needs:
      - create_gh_release
      - build_and_upload_source_archive
    if: '!github.event.prerelease'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt update -qq
          sudo apt install -y --no-install-recommends git gettext-base

      - name: Generate PKGBUILD
        env:
          PKG_NAME: ${{ needs.create_gh_release.outputs.pkg_name }}
          PKG_VERSION: ${{ needs.create_gh_release.outputs.version }}
          TAG_NAME: ${{ needs.create_gh_release.outputs.tag_name }}
          PKGBUILD_TEMPLATE_PATH: ./AUR/PKGBUILD.in
          PKGBUILD_PATH: ./AUR/PKGBUILD
        run: |
          echo "Generating PKGBUILD at $PKGBUILD_PATH"
          /usr/bin/envsubst '${PKG_NAME} ${PKG_VERSION}' < "$PKGBUILD_TEMPLATE_PATH" > "$PKGBUILD_PATH"
          echo ""
          cat "$PKGBUILD_PATH"

      - name: Publish AUR package
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        with:
          pkgname: ${{ needs.create_gh_release.outputs.pkg_name }}
          pkgbuild: ./AUR/PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package
          ssh_keyscan_types: rsa,ecdsa,ed25519
